# -*- coding: utf-8 -*-
"""Projeto Integrador.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10omtKTuuM2I5fQO4BmtAN2aBL3DqXEdA

# UK Used Car Pricing Project

In this project we are going to develop a tool to predict the price that a used car should be anounced according to previous data.

Datasets:
https://www.kaggle.com/datasets/adityadesai13/used-car-dataset-ford-and-mercedes?select=vw.csv

## 1. Importing Libraries and Datasets
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df_1 = pd.read_csv('audi.csv')
df_1.head()

df_1.shape

df_2 = pd.read_csv('bmw.csv')
df_2.head()

df_2.shape

df_3 = pd.read_csv('cclass.csv')
df_3.head()

df_3.shape

df_4 = pd.read_csv('focus.csv')
df_4.head()

df_4.shape

df_5 = pd.read_csv('ford.csv')
df_5.head()

df_5.shape

df_6 = pd.read_csv('hyundi.csv')
df_6.head()

df_6.shape

df_7 = pd.read_csv('merc.csv')
df_7.head()

df_7.shape

df_8 = pd.read_csv('skoda.csv')
df_8.head()

df_8.shape

df_9 = pd.read_csv('toyota.csv')
df_9.head()

df_9.shape

df_10 = pd.read_csv('unclean cclass.csv')
df_10.head()

df_10['model'].nunique()

df_10.info()

df_11 = pd.read_csv('unclean focus.csv')
df_11.head()

df_11.shape

df_11.info()

df_12 = pd.read_csv('vauxhall.csv')
df_12.head()

df_12.shape

df_13 = pd.read_csv('vw.csv')
df_13.head()

df_13.shape

"""Analizing all those datasets, we can observe that they have common columns, but doesn't have the same number of them.

By this way, I'm going to treat each dataset to make them in the same size.
"""

df_1

df_1 = df_1.rename(columns={'price': 'gross_price'})

df_1['price'] = df_1['gross_price'] + df_1['tax']
df_1.head()

df_1 = df_1.drop(columns=['gross_price', 'tax'])
df_1.head()

df_1.info()

"""Firts dataframe is clean and ready!"""

df_2

df_2 = df_2.rename(columns={'price': 'gross_price'})

df_2['price'] = df_2['gross_price'] + df_2['tax']
df_2.head()

df_2 = df_2.drop(columns=['gross_price', 'tax'])
df_2.head()

df_2.info()

"""Second dataframe is clean and ready!"""

df_3

"""We don't have the information about the Miles Per Gallon that each model consumes. So we have to cut this column from our data analysis"""

df_1 = df_1.drop(columns='mpg')

df_2 = df_2.drop(columns='mpg')

"""Checking the Third dataset"""

df_3.info()

"""Third dataset is clean and ready"""

df_4

"""There is no tax column in this dataframe. We assumed that the column 'price' already has the value of taxes included"""

df_4.info()

"""Fourth dataset is clean and ready"""

df_5

df_5 = df_5.rename(columns={'price': 'gross_price'})

df_5['price'] = df_5['gross_price'] + df_5['tax']
df_5.head()

df_5 = df_5.drop(columns=['gross_price', 'tax','mpg'])
df_5.head()

df_5.info()

"""Fifth dataset is clean and ready"""

df_6

df_6 = df_6.rename(columns={'price': 'gross_price'})

df_6['price'] = df_6['gross_price'] + df_6['tax(£)']
df_6.head()

df_6 = df_6.drop(columns=['gross_price', 'tax(£)','mpg'])
df_6.head()

"""Sixth dataset is clean and ready"""

df_7

df_7 = df_7.rename(columns={'price': 'gross_price'})

df_7['price'] = df_7['gross_price'] + df_7['tax']
df_7.head()

df_7 = df_7.drop(columns=['gross_price', 'tax','mpg'])
df_7.head()

"""Seventh dataset is clean and ready"""

df_8

df_8 = df_8.rename(columns={'price': 'gross_price'})

df_8['price'] = df_8['gross_price'] + df_8['tax']
df_8.head()

df_8 = df_8.drop(columns=['gross_price', 'tax','mpg'])
df_8.head()

"""Eighth dataset is clean and ready"""

df_9

df_9 = df_9.rename(columns={'price': 'gross_price'})

df_9['price'] = df_9['gross_price'] + df_9['tax']
df_9.head()

df_9 = df_9.drop(columns=['gross_price', 'tax','mpg'])
df_9.head()

"""Nineth dataset is clean and ready"""

df_10

df_10.info()

df_10['price'] = df_10['price'].str.replace('£', '')

df_10['price'] = df_10['price'].str.replace(',', '')

df_10 = df_10[ df_10['price'].notna() ]

df_10.shape

df_10['price'] = pd.to_numeric(df_10['price'])

df_10.info()

df_10['mileage'].value_counts()

df_10['mileage'] = df_10['mileage'].str.replace(',', '')

df_10 = df_10[df_10['mileage'] != 'Unknown']

df_10['mileage'] = pd.to_numeric(df_10['mileage'])

df_10.info()

df_10['fuel type'].value_counts()

df_10['fuel type2'].value_counts()

df_10[df_10['fuel type2'].isna()]['fuel type'].isna().value_counts()

"""In this dataset, I just noticed that the values that are not present is the "fuel type2" can be filled with the information from the column 'fuel type'. So, we are going to fill the column 'fuel type2' and then delete the column 'fuel type'."""

list_of_fuel_type = []
nan_number = [np.nan]
for i in range(1, len(df_10['fuel type'])):
  if pd.isna(df_10['fuel type2'].iloc[i]) == True:
    list_of_fuel_type.append(df_10['fuel type'].iloc[i])
  else:
    list_of_fuel_type.append(df_10['fuel type2'].iloc[i])
    pass

list_of_fuel_type

pd.DataFrame(list_of_fuel_type)[0]

list_of_fuel_type.append(np.nan)

df_10['fuel_type'] = list_of_fuel_type

df_10['fuel_type'].isna().value_counts()

df_10 = df_10.drop(columns=['fuel type','fuel type2','reference'])

df_10.head()

"""Now we are going to check the engine size columns"""

df_10[df_10['engine size2'].isna()]['engine size'].isna().value_counts()

"""All the NaNs values in engine size2 has a couterpart in engine size"""

list_of_engine_size = []
nan_number = [np.nan]
for i in range(1, len(df_10['engine size'])):
  if pd.isna(df_10['engine size2'].iloc[i]) == True:
    list_of_engine_size.append(df_10['engine size'].iloc[i])
  else:
    list_of_engine_size.append(df_10['engine size2'].iloc[i])
    pass

len(list_of_engine_size)

list_of_engine_size.append(np.nan)

df_10['engine_size'] = list_of_engine_size

df_10 = df_10.drop(columns=['engine size','engine size2'], axis=1)

df_10.head()

df_10.info()

"""We are going to do the same thing with mileage"""

df_10[df_10['mileage'].isna()]['mileage2'].isna().value_counts()

list_of_mileages = []
nan_number = [np.nan]
for i in range(1, len(df_10['mileage'])):
  if pd.isna(df_10['mileage'].iloc[i]) == True:
    list_of_mileages.append(df_10['mileage2'].iloc[i])
  else:
    list_of_mileages.append(df_10['mileage'].iloc[i])
    pass

list_of_mileages.append(np.nan)

df_10['total_mileage'] = list_of_mileages

df_10.head()

df_10 = df_10.drop(columns=['mileage','mileage2'], axis=1)

df_10 = df_10.rename(columns={'total_mileage': 'mileage', 'fuel_type': 'fuel type', 'engine_size': 'engine size'})
df_10.head()

df_10 = df_10.dropna()

df_10.info()

df_10['mileage'] = df_10['mileage'].str.replace(',', '')

df_10 = df_10[df_10['mileage'] != 'Unknown']

df_10['mileage'] = pd.to_numeric(df_10['mileage'])

df_10.info()





"""The tenth dataset is clean and ready"""

df_11

df_11['price'] = df_11['price'].str.replace('£', '')

df_11['price'] = df_11['price'].str.replace(',', '')

